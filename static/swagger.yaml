swagger: '2.0'
info:
  title: "API name"
  description: "Brief description"
  version: "1.0.0"
host: "e-comm-new-1.onrender.com" #working on local host
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /customers/login:
    post: # Type of request
      tags:
        - Customers # what category this request belongs to
      summary: "Login Endpoint (generates token)"
      description: "Endpoint for user authentication, and token generation"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials for login"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              auth_token: "kusdt3498uhfd943...."
              message: "Successfully logged In"
              status: "Success"

  /customers/{id}:
    put: # Type of request
      tags:
        - Customers # what category this request belongs to
      summary: "Update Customer End point"
      description: "Endpoint for updating customer details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the customer to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Customer data to update"
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomer"
      responses:
        201:
          description: "Updated Customer details"
          schema:
            $ref: "#/definitions/UpdateResponse"
        400:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete: # Type of request
      tags:
        - Customers # what category this request belongs to
      summary: "Delete Customer End point"
      description: "Endpoint for deleting customer details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the customer to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Deleted Customer details"
          schema:
            $ref: "#/definitions/DeleteResponse"
        404:
          description: "Customer not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customers:
    get:
      tags:
        - Customers
      summary: "Returns all customers"
      description: "Returns all customer's information (requires token)"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Retrieve customers successfully"
          schema:
            $ref: "#/definitions/AllCustomers"

  /customeraccnt:
    get:
      tags:
        - CustomerAccnt
      summary: "Returns all customeraccnts"
      description: "Returns all customer accounts information"
      responses:
        200:
          description: "Retrieve customeraccnt successfully"
          schema:
            $ref: "#/definitions/AllCustomerAccounts"
        400:
          description: "Customer Accounts not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /customeraccnt/{id}:
    put: # Type of request
      tags:
        - CustomerAccnt # what category this request belongs to
      summary: "Update CustomerAccount End point"
      description: "Endpoint for updating customer account details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the customer account to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "CustomerAccount data to update"
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerAccount"
      responses:
        201:
          description: "Updated Customer Account details"
          schema:
            $ref: "#/definitions/UpdateAccountResponse"
        400:
          description: "Customer Account not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete: # Type of request
      tags:
        - CustomerAccnt # what category this request belongs to
      summary: "Delete Customer Account End point"
      description: "Endpoint for deleting customer account details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the customer account to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Deleted Customer Account details"
          schema:
            $ref: "#/definitions/DeleteAccountResponse"
        404:
          description: "Customer Account not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /products:
    get:
      tags:
        - Products
      summary: "Returns all products"
      description: "Returns all product's information"
      responses:
        200:
          description: "Retrieve products successfully"
          schema:
            $ref: "#/definitions/AllProducts"
        400:
          description: "Product not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /products/{id}:
    put: # Type of request
      tags:
        - Products # what category this request belongs to
      summary: "Update Product End point"
      description: "Endpoint for updating product details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the product to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Product data to update"
          required: true
          schema:
            $ref: "#/definitions/UpdateProduct"
      responses:
        201:
          description: "Updated Product details"
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: "Product not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete: # Type of request
      tags:
        - Products # what category this request belongs to
      summary: "Delete Products End point"
      description: "Endpoint for deleting product details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the product to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Deleted Product details"
          schema:
            $ref: "#/definitions/DeleteProduct"
        404:
          description: "Product not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /orders:
    get:
      tags:
        - Orders
      summary: "Returns all the orders"
      description: "Returns all orders's information"
      responses:
        200:
          description: "Retrieve orders successfully"
          schema:
            $ref: "#/definitions/AllOrders"

  /orders/{id}:
    put: # Type of request
      tags:
        - Orders # what category this request belongs to
      summary: "Update Orders End point"
      description: "Endpoint for updating Order details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the order to update"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Order data to update"
          required: true
          schema:
            $ref: "#/definitions/UpdateOrder"
      responses:
        201:
          description: "Updated Order details"
          schema:
            $ref: "#/definitions/OrderResponse"
        400:
          description: "Order not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete: # Type of request
      tags:
        - Orders # what category this request belongs to
      summary: "Delete Orders End point"
      description: "Endpoint for deleting order details"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the order to delete"
          required: true
          type: "integer"
      responses:
        200:
          description: "Deleted Order details"
          schema:
            $ref: "#/definitions/DeleteOrder"
        404:
          description: "Order not found"
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  LoginPayload:
    type: "object"
    properties:
      username:
        type: "string"
        description: "customer's username"
      password:
        type: "string"
        description: "customer's password"
    required:
      - "username"
      - "password"
  
  LoginResponse:
    type: "object"
    properties:
      auth_token:
        type: "string"
        description: "Authorization token"
      message:
        type: "string"
        description: "Successfully logged In"
      status:
        type: "string"
        description: "success"

  UpdateCustomer:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Customer's name"
      email:
        type: "string"
        description: "Customer's email"
      phone:
        type: "string"
        description: "Customer's phone"
      username:
        type: "string"
        description: "customer's username"
      password:
        type: "string"
        description: "customer's password"
    required:
      - "username"
      - "password"

  UpdateProduct:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Product name"
      price:
        type: "number"
        description: "Product price"
    required:
      - "name"
      - "price"
  
  UpdateCustomerAccount:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Customer account username"
      password:
        type: "string"
        description: "Customer account password"
      customer_id:
        type: number
        description: "Customer Id associated with the customer account"
    required:
      - "username"
      - "password"

  UpdateOrder:
    type: "object"
    properties:
      date:
        type: "date"
        description: "Order date"
      customer_id:
        type: "number"
        description: "Customer id associated with the order"
    required:
      - "date"
      - "customer_id"

  UpdateResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully updated customer info"
      status:
        type: "string"
        description: "Success"

  ProductResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully updated product info"
      status:
        type: "string"
        description: "Success"

  OrderResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully updated order info"
      status:
        type: "string"
        description: "Success"

  DeleteResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully deleted customer info"
      status:
        type: "string"
        description: "Success"

  DeleteProduct:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully deleted product info"
      status:
        type: "string"
        description: "Success"

  DeleteAccountResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully deleted customer accnt info"
      status:
        type: "string"
        description: "Success"

  DeleteOrder:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Successfully deleted order info"
      status:
        type: "string"
        description: "Success"

  ErrorResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Error Message"
      status:
        type: "string"
        description: "Error status"

  AllCustomers:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Customer's ID"
      name:
        type: "string"
        description: "Customer's name"
      email:
        type: "string"
        description: "Customer's email"
      phone:
        type: "string"
        description: "Customer's phone"
      username: 
        type: "string"
        description: "Customer's username"
      role_id:
        type: "integer"
        description: "Customer's role ID"

  AllProducts:
    type: "object"
    properties :
      name:
        type: "string"
        description: "Product's name"
      price:
        type: "number"
        format: "float"
        description: "Product's price"

  AllCustomerAccounts:
    type: "object"
    properties :
      username:
        type: "string"
        description: "Username associated with the account"
      password:
        type: "string"
        format: "float"
        description: "Password associated with the account"
      customer_id:
        type: "number"
        description: "Customer Id associated with the customer account"      

  AllOrders:
    type: "object"
    properties :
      date:
        type: "string"
        description: "Order date"
      price:
        type: "number"
        description: "Price associated with the order"
      customer_id:
        type: "integer"
        description: "Customer ID associated with the order"
      